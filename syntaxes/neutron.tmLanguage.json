{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "neutron",
    "scopeName": "source.neutron",
    "patterns": [
        { "include": "#comments" },
        { "include": "#imports" },
        { "include": "#file-imports" },
        { "include": "#typed-variables" },
        { "include": "#keywords" },
        { "include": "#operators" },
        { "include": "#constants" },
        { "include": "#types" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#lambdas" },
        { "include": "#functions" },
        { "include": "#variables" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.neutron",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.neutron",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },

        "keywords": {
            "patterns": [
                {
                    "name": "storage.type.var.neutron",
                    "match": "\\b(var)\\b"
                },
                {
                    "name": "keyword.control.neutron",
                    "match": "\\b(if|else|while|for|return|break|continue|class|fun|this|and|or|not|in|new|match|case|default)\\b"
                }
            ]
        },

        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arrow.neutron",
                    "match": "=>"
                }
            ]
        },

        "constants": {
            "patterns": [
                {
                    "name": "constant.language.neutron",
                    "match": "\\b(true|false|nil)\\b"
                },
                {
                    "name": "constant.other.neutron",
                    "match": "\\b[A-Z_][A-Z0-9_]*\\b"
                }
            ]
        },

        "types": {
            "patterns": [
                {
                    "name": "support.class.neutron",
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
                }
            ]
        },

        "typed-variables": {
            "patterns": [
                {
                    "comment": "Optional type annotations after var: var int x = 1;",
                    "begin": "\\b(var)\\s+(?:(int|float|string|bool|array|object|any))\\b",
                    "beginCaptures": {
                        "1": { "name": "storage.type.var.neutron" },
                        "2": { "name": "storage.type.primitive.neutron" }
                    },
                    "end": "(?=\\s*[=;\\)])",
                    "name": "meta.variable.typed-declaration.neutron",
                    "patterns": [
                        {
                            "name": "variable.other.neutron",
                            "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
                        }
                    ]
                }
            ]
        },

        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.neutron",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.neutron",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.neutron",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.neutron",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },

        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.neutron",
                    "match": "\\b(?:\\d+\\.\\d*|\\.\\d+|\\d+)(?:[eE][+-]?\\d+)?\\b"
                }
            ]
        },

        "functions": {
            "patterns": [
                {
                    "comment": "Function definitions after 'fun'",
                    "begin": "\\bfun\\s+",
                    "beginCaptures": {
                        "0": { "name": "keyword.other.function.neutron" }
                    },
                    "end": "(?=\\()",
                    "name": "meta.function.definition.neutron",
                    "patterns": [
                        {
                            "name": "entity.name.function.definition.neutron",
                            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                        }
                    ]
                },
                {
                    "comment": "Standalone function calls like say()",
                    "name": "entity.name.function.call.neutron",
                    "match": "(?<!\\bfun\\s+)\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
                },
                {
                    "comment": "Method calls like object.method() â€” only color method name",
                    "name": "entity.name.function.call.method.neutron",
                    "match": "(?<=\\.)[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*\\()"
                }
            ]
        },

        "variables": {
            "patterns": [
                {
                    "name": "variable.other.neutron",
                    "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "imports": {
            "patterns": [
                {
                    "begin": "\\b(use)\\b\\s+",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.import" }
                    },
                    "end": "(;)",
                    "endCaptures": {
                        "1": { "name": "punctuation.terminator" }
                    },
                    "patterns": [
                        {
                            "name": "support.type.module.builtin.neutron",
                            "match": "\\b(sys|json|math|convert|time|http)\\b"
                        },
                        {
                            "name": "support.type.module",
                            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)*\\b"
                        }
                    ]
                }
            ]
        }
        ,
        "file-imports": {
            "patterns": [
                {
                    "begin": "\\b(using)\\b\\s*",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.import" }
                    },
                    "end": "(;)",
                    "endCaptures": {
                        "1": { "name": "punctuation.terminator" }
                    },
                    "patterns": [
                        {
                            "name": "string.quoted.single.path.neutron",
                            "match": "'(?:\\\\'|[^'])*'"
                        }
                    ]
                }
            ]
        }
        ,
        "lambdas": {
            "patterns": [
                {
                    "comment": "Anonymous function (lambda) parameters",
                    "begin": "\\bfun\\s*\\(",
                    "beginCaptures": {
                        "0": { "name": "keyword.other.function.neutron" }
                    },
                    "end": "\\)",
                    "name": "meta.function.lambda.neutron",
                    "patterns": [
                        {
                            "name": "variable.parameter.neutron",
                            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                        },
                        {
                            "name": "punctuation.separator.parameter.neutron",
                            "match": ","
                        }
                    ]
                }
            ]
        }
    }
}
